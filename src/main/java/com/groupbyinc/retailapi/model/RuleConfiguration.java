/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupbyinc.retailapi.model.BoostedProductBucket;
import com.groupbyinc.retailapi.model.ExperimentVariant;
import com.groupbyinc.retailapi.model.MessageType;
import com.groupbyinc.retailapi.model.PinnedRefinement;
import com.groupbyinc.retailapi.model.RangeFilter;
import com.groupbyinc.retailapi.model.RuleTemplate;
import com.groupbyinc.retailapi.model.RuleType;
import com.groupbyinc.retailapi.model.SearchFilter;
import com.groupbyinc.retailapi.model.Sort;
import com.groupbyinc.retailapi.model.TriggerSet;
import com.groupbyinc.retailapi.model.ValueFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * RuleConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-20T17:52:51.787881444-04:00[America/Toronto]")
public class RuleConfiguration {
  public static final String SERIALIZED_NAME_RULE_IN_EXPERIMENT = "ruleInExperiment";
  @SerializedName(SERIALIZED_NAME_RULE_IN_EXPERIMENT)
  private Boolean ruleInExperiment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AREA_ID = "areaId";
  @SerializedName(SERIALIZED_NAME_AREA_ID)
  private Integer areaId;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ACTIVE_HOURS_ENABLED = "activeHoursEnabled";
  @SerializedName(SERIALIZED_NAME_ACTIVE_HOURS_ENABLED)
  private Boolean activeHoursEnabled;

  public static final String SERIALIZED_NAME_ACTIVE_FROM = "activeFrom";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FROM)
  private Long activeFrom;

  public static final String SERIALIZED_NAME_ACTIVE_TO = "activeTo";
  @SerializedName(SERIALIZED_NAME_ACTIVE_TO)
  private Long activeTo;

  public static final String SERIALIZED_NAME_TRIGGER_SETS = "triggerSets";
  @SerializedName(SERIALIZED_NAME_TRIGGER_SETS)
  private List<TriggerSet> triggerSets = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIASING_PROFILE_NAME = "biasingProfileName";
  @SerializedName(SERIALIZED_NAME_BIASING_PROFILE_NAME)
  private String biasingProfileName;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Sort sort;

  public static final String SERIALIZED_NAME_INCLUDED_NAVIGATIONS = "includedNavigations";
  @SerializedName(SERIALIZED_NAME_INCLUDED_NAVIGATIONS)
  private List<String> includedNavigations = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_FILTERS = "valueFilters";
  @SerializedName(SERIALIZED_NAME_VALUE_FILTERS)
  private List<ValueFilter> valueFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_FILTERS = "searchFilters";
  @SerializedName(SERIALIZED_NAME_SEARCH_FILTERS)
  private List<SearchFilter> searchFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANGE_FILTERS = "rangeFilters";
  @SerializedName(SERIALIZED_NAME_RANGE_FILTERS)
  private List<RangeFilter> rangeFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private RuleTemplate template;

  public static final String SERIALIZED_NAME_BOOSTED_PRODUCT_BUCKETS = "boostedProductBuckets";
  @SerializedName(SERIALIZED_NAME_BOOSTED_PRODUCT_BUCKETS)
  private List<BoostedProductBucket> boostedProductBuckets;

  public static final String SERIALIZED_NAME_PINNED_REFINEMENTS = "pinnedRefinements";
  @SerializedName(SERIALIZED_NAME_PINNED_REFINEMENTS)
  private List<PinnedRefinement> pinnedRefinements = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageType messageType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RuleType type;

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<ExperimentVariant> variants = new ArrayList<>();

  public RuleConfiguration() {
  }

  public RuleConfiguration ruleInExperiment(Boolean ruleInExperiment) {
    
    this.ruleInExperiment = ruleInExperiment;
    return this;
  }

   /**
   * Get ruleInExperiment
   * @return ruleInExperiment
  **/
  @javax.annotation.Nullable
  public Boolean getRuleInExperiment() {
    return ruleInExperiment;
  }


  public void setRuleInExperiment(Boolean ruleInExperiment) {
    this.ruleInExperiment = ruleInExperiment;
  }


  public RuleConfiguration id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public RuleConfiguration name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RuleConfiguration areaId(Integer areaId) {
    
    this.areaId = areaId;
    return this;
  }

   /**
   * Get areaId
   * @return areaId
  **/
  @javax.annotation.Nonnull
  public Integer getAreaId() {
    return areaId;
  }


  public void setAreaId(Integer areaId) {
    this.areaId = areaId;
  }


  public RuleConfiguration priority(Integer priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public RuleConfiguration enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public RuleConfiguration activeHoursEnabled(Boolean activeHoursEnabled) {
    
    this.activeHoursEnabled = activeHoursEnabled;
    return this;
  }

   /**
   * Get activeHoursEnabled
   * @return activeHoursEnabled
  **/
  @javax.annotation.Nonnull
  public Boolean getActiveHoursEnabled() {
    return activeHoursEnabled;
  }


  public void setActiveHoursEnabled(Boolean activeHoursEnabled) {
    this.activeHoursEnabled = activeHoursEnabled;
  }


  public RuleConfiguration activeFrom(Long activeFrom) {
    
    this.activeFrom = activeFrom;
    return this;
  }

   /**
   * Get activeFrom
   * @return activeFrom
  **/
  @javax.annotation.Nonnull
  public Long getActiveFrom() {
    return activeFrom;
  }


  public void setActiveFrom(Long activeFrom) {
    this.activeFrom = activeFrom;
  }


  public RuleConfiguration activeTo(Long activeTo) {
    
    this.activeTo = activeTo;
    return this;
  }

   /**
   * Get activeTo
   * @return activeTo
  **/
  @javax.annotation.Nonnull
  public Long getActiveTo() {
    return activeTo;
  }


  public void setActiveTo(Long activeTo) {
    this.activeTo = activeTo;
  }


  public RuleConfiguration triggerSets(List<TriggerSet> triggerSets) {
    
    this.triggerSets = triggerSets;
    return this;
  }

  public RuleConfiguration addTriggerSetsItem(TriggerSet triggerSetsItem) {
    if (this.triggerSets == null) {
      this.triggerSets = new ArrayList<>();
    }
    this.triggerSets.add(triggerSetsItem);
    return this;
  }

   /**
   * Get triggerSets
   * @return triggerSets
  **/
  @javax.annotation.Nonnull
  public List<TriggerSet> getTriggerSets() {
    return triggerSets;
  }


  public void setTriggerSets(List<TriggerSet> triggerSets) {
    this.triggerSets = triggerSets;
  }


  public RuleConfiguration biasingProfileName(String biasingProfileName) {
    
    this.biasingProfileName = biasingProfileName;
    return this;
  }

   /**
   * Get biasingProfileName
   * @return biasingProfileName
  **/
  @javax.annotation.Nonnull
  public String getBiasingProfileName() {
    return biasingProfileName;
  }


  public void setBiasingProfileName(String biasingProfileName) {
    this.biasingProfileName = biasingProfileName;
  }


  public RuleConfiguration sort(Sort sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nonnull
  public Sort getSort() {
    return sort;
  }


  public void setSort(Sort sort) {
    this.sort = sort;
  }


  public RuleConfiguration includedNavigations(List<String> includedNavigations) {
    
    this.includedNavigations = includedNavigations;
    return this;
  }

  public RuleConfiguration addIncludedNavigationsItem(String includedNavigationsItem) {
    if (this.includedNavigations == null) {
      this.includedNavigations = new ArrayList<>();
    }
    this.includedNavigations.add(includedNavigationsItem);
    return this;
  }

   /**
   * Get includedNavigations
   * @return includedNavigations
  **/
  @javax.annotation.Nonnull
  public List<String> getIncludedNavigations() {
    return includedNavigations;
  }


  public void setIncludedNavigations(List<String> includedNavigations) {
    this.includedNavigations = includedNavigations;
  }


  public RuleConfiguration valueFilters(List<ValueFilter> valueFilters) {
    
    this.valueFilters = valueFilters;
    return this;
  }

  public RuleConfiguration addValueFiltersItem(ValueFilter valueFiltersItem) {
    if (this.valueFilters == null) {
      this.valueFilters = new ArrayList<>();
    }
    this.valueFilters.add(valueFiltersItem);
    return this;
  }

   /**
   * Get valueFilters
   * @return valueFilters
  **/
  @javax.annotation.Nonnull
  public List<ValueFilter> getValueFilters() {
    return valueFilters;
  }


  public void setValueFilters(List<ValueFilter> valueFilters) {
    this.valueFilters = valueFilters;
  }


  public RuleConfiguration searchFilters(List<SearchFilter> searchFilters) {
    
    this.searchFilters = searchFilters;
    return this;
  }

  public RuleConfiguration addSearchFiltersItem(SearchFilter searchFiltersItem) {
    if (this.searchFilters == null) {
      this.searchFilters = new ArrayList<>();
    }
    this.searchFilters.add(searchFiltersItem);
    return this;
  }

   /**
   * Get searchFilters
   * @return searchFilters
  **/
  @javax.annotation.Nonnull
  public List<SearchFilter> getSearchFilters() {
    return searchFilters;
  }


  public void setSearchFilters(List<SearchFilter> searchFilters) {
    this.searchFilters = searchFilters;
  }


  public RuleConfiguration rangeFilters(List<RangeFilter> rangeFilters) {
    
    this.rangeFilters = rangeFilters;
    return this;
  }

  public RuleConfiguration addRangeFiltersItem(RangeFilter rangeFiltersItem) {
    if (this.rangeFilters == null) {
      this.rangeFilters = new ArrayList<>();
    }
    this.rangeFilters.add(rangeFiltersItem);
    return this;
  }

   /**
   * Get rangeFilters
   * @return rangeFilters
  **/
  @javax.annotation.Nonnull
  public List<RangeFilter> getRangeFilters() {
    return rangeFilters;
  }


  public void setRangeFilters(List<RangeFilter> rangeFilters) {
    this.rangeFilters = rangeFilters;
  }


  public RuleConfiguration template(RuleTemplate template) {
    
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @javax.annotation.Nonnull
  public RuleTemplate getTemplate() {
    return template;
  }


  public void setTemplate(RuleTemplate template) {
    this.template = template;
  }


  public RuleConfiguration boostedProductBuckets(List<BoostedProductBucket> boostedProductBuckets) {
    
    this.boostedProductBuckets = boostedProductBuckets;
    return this;
  }

  public RuleConfiguration addBoostedProductBucketsItem(BoostedProductBucket boostedProductBucketsItem) {
    if (this.boostedProductBuckets == null) {
      this.boostedProductBuckets = new ArrayList<>();
    }
    this.boostedProductBuckets.add(boostedProductBucketsItem);
    return this;
  }

   /**
   * Get boostedProductBuckets
   * @return boostedProductBuckets
  **/
  @javax.annotation.Nullable
  public List<BoostedProductBucket> getBoostedProductBuckets() {
    return boostedProductBuckets;
  }


  public void setBoostedProductBuckets(List<BoostedProductBucket> boostedProductBuckets) {
    this.boostedProductBuckets = boostedProductBuckets;
  }


  public RuleConfiguration pinnedRefinements(List<PinnedRefinement> pinnedRefinements) {
    
    this.pinnedRefinements = pinnedRefinements;
    return this;
  }

  public RuleConfiguration addPinnedRefinementsItem(PinnedRefinement pinnedRefinementsItem) {
    if (this.pinnedRefinements == null) {
      this.pinnedRefinements = new ArrayList<>();
    }
    this.pinnedRefinements.add(pinnedRefinementsItem);
    return this;
  }

   /**
   * Get pinnedRefinements
   * @return pinnedRefinements
  **/
  @javax.annotation.Nonnull
  public List<PinnedRefinement> getPinnedRefinements() {
    return pinnedRefinements;
  }


  public void setPinnedRefinements(List<PinnedRefinement> pinnedRefinements) {
    this.pinnedRefinements = pinnedRefinements;
  }


  public RuleConfiguration messageType(MessageType messageType) {
    
    this.messageType = messageType;
    return this;
  }

   /**
   * Get messageType
   * @return messageType
  **/
  @javax.annotation.Nonnull
  public MessageType getMessageType() {
    return messageType;
  }


  public void setMessageType(MessageType messageType) {
    this.messageType = messageType;
  }


  public RuleConfiguration type(RuleType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public RuleType getType() {
    return type;
  }


  public void setType(RuleType type) {
    this.type = type;
  }


  public RuleConfiguration variants(List<ExperimentVariant> variants) {
    
    this.variants = variants;
    return this;
  }

  public RuleConfiguration addVariantsItem(ExperimentVariant variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

   /**
   * Get variants
   * @return variants
  **/
  @javax.annotation.Nonnull
  public List<ExperimentVariant> getVariants() {
    return variants;
  }


  public void setVariants(List<ExperimentVariant> variants) {
    this.variants = variants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleConfiguration ruleConfiguration = (RuleConfiguration) o;
    return Objects.equals(this.ruleInExperiment, ruleConfiguration.ruleInExperiment) &&
        Objects.equals(this.id, ruleConfiguration.id) &&
        Objects.equals(this.name, ruleConfiguration.name) &&
        Objects.equals(this.areaId, ruleConfiguration.areaId) &&
        Objects.equals(this.priority, ruleConfiguration.priority) &&
        Objects.equals(this.enabled, ruleConfiguration.enabled) &&
        Objects.equals(this.activeHoursEnabled, ruleConfiguration.activeHoursEnabled) &&
        Objects.equals(this.activeFrom, ruleConfiguration.activeFrom) &&
        Objects.equals(this.activeTo, ruleConfiguration.activeTo) &&
        Objects.equals(this.triggerSets, ruleConfiguration.triggerSets) &&
        Objects.equals(this.biasingProfileName, ruleConfiguration.biasingProfileName) &&
        Objects.equals(this.sort, ruleConfiguration.sort) &&
        Objects.equals(this.includedNavigations, ruleConfiguration.includedNavigations) &&
        Objects.equals(this.valueFilters, ruleConfiguration.valueFilters) &&
        Objects.equals(this.searchFilters, ruleConfiguration.searchFilters) &&
        Objects.equals(this.rangeFilters, ruleConfiguration.rangeFilters) &&
        Objects.equals(this.template, ruleConfiguration.template) &&
        Objects.equals(this.boostedProductBuckets, ruleConfiguration.boostedProductBuckets) &&
        Objects.equals(this.pinnedRefinements, ruleConfiguration.pinnedRefinements) &&
        Objects.equals(this.messageType, ruleConfiguration.messageType) &&
        Objects.equals(this.type, ruleConfiguration.type) &&
        Objects.equals(this.variants, ruleConfiguration.variants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleInExperiment, id, name, areaId, priority, enabled, activeHoursEnabled, activeFrom, activeTo, triggerSets, biasingProfileName, sort, includedNavigations, valueFilters, searchFilters, rangeFilters, template, boostedProductBuckets, pinnedRefinements, messageType, type, variants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleConfiguration {\n");
    sb.append("    ruleInExperiment: ").append(toIndentedString(ruleInExperiment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    areaId: ").append(toIndentedString(areaId)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    activeHoursEnabled: ").append(toIndentedString(activeHoursEnabled)).append("\n");
    sb.append("    activeFrom: ").append(toIndentedString(activeFrom)).append("\n");
    sb.append("    activeTo: ").append(toIndentedString(activeTo)).append("\n");
    sb.append("    triggerSets: ").append(toIndentedString(triggerSets)).append("\n");
    sb.append("    biasingProfileName: ").append(toIndentedString(biasingProfileName)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    includedNavigations: ").append(toIndentedString(includedNavigations)).append("\n");
    sb.append("    valueFilters: ").append(toIndentedString(valueFilters)).append("\n");
    sb.append("    searchFilters: ").append(toIndentedString(searchFilters)).append("\n");
    sb.append("    rangeFilters: ").append(toIndentedString(rangeFilters)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    boostedProductBuckets: ").append(toIndentedString(boostedProductBuckets)).append("\n");
    sb.append("    pinnedRefinements: ").append(toIndentedString(pinnedRefinements)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleInExperiment");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("areaId");
    openapiFields.add("priority");
    openapiFields.add("enabled");
    openapiFields.add("activeHoursEnabled");
    openapiFields.add("activeFrom");
    openapiFields.add("activeTo");
    openapiFields.add("triggerSets");
    openapiFields.add("biasingProfileName");
    openapiFields.add("sort");
    openapiFields.add("includedNavigations");
    openapiFields.add("valueFilters");
    openapiFields.add("searchFilters");
    openapiFields.add("rangeFilters");
    openapiFields.add("template");
    openapiFields.add("boostedProductBuckets");
    openapiFields.add("pinnedRefinements");
    openapiFields.add("messageType");
    openapiFields.add("type");
    openapiFields.add("variants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("areaId");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("activeHoursEnabled");
    openapiRequiredFields.add("activeFrom");
    openapiRequiredFields.add("activeTo");
    openapiRequiredFields.add("triggerSets");
    openapiRequiredFields.add("biasingProfileName");
    openapiRequiredFields.add("sort");
    openapiRequiredFields.add("includedNavigations");
    openapiRequiredFields.add("valueFilters");
    openapiRequiredFields.add("searchFilters");
    openapiRequiredFields.add("rangeFilters");
    openapiRequiredFields.add("template");
    openapiRequiredFields.add("boostedProductBuckets");
    openapiRequiredFields.add("pinnedRefinements");
    openapiRequiredFields.add("messageType");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("variants");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleConfiguration
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleConfiguration is not found in the empty JSON string", RuleConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("triggerSets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerSets` to be an array in the JSON string but got `%s`", jsonObj.get("triggerSets").toString()));
      }

      JsonArray jsonArraytriggerSets = jsonObj.getAsJsonArray("triggerSets");
      // validate the required field `triggerSets` (array)
      for (int i = 0; i < jsonArraytriggerSets.size(); i++) {
        TriggerSet.validateJsonElement(jsonArraytriggerSets.get(i));
      };
      if (!jsonObj.get("biasingProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biasingProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biasingProfileName").toString()));
      }
      // validate the required field `sort`
      Sort.validateJsonElement(jsonObj.get("sort"));
      // ensure the required json array is present
      if (jsonObj.get("includedNavigations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("includedNavigations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedNavigations` to be an array in the JSON string but got `%s`", jsonObj.get("includedNavigations").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("valueFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueFilters` to be an array in the JSON string but got `%s`", jsonObj.get("valueFilters").toString()));
      }

      JsonArray jsonArrayvalueFilters = jsonObj.getAsJsonArray("valueFilters");
      // validate the required field `valueFilters` (array)
      for (int i = 0; i < jsonArrayvalueFilters.size(); i++) {
        ValueFilter.validateJsonElement(jsonArrayvalueFilters.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("searchFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchFilters` to be an array in the JSON string but got `%s`", jsonObj.get("searchFilters").toString()));
      }

      JsonArray jsonArraysearchFilters = jsonObj.getAsJsonArray("searchFilters");
      // validate the required field `searchFilters` (array)
      for (int i = 0; i < jsonArraysearchFilters.size(); i++) {
        SearchFilter.validateJsonElement(jsonArraysearchFilters.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("rangeFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rangeFilters` to be an array in the JSON string but got `%s`", jsonObj.get("rangeFilters").toString()));
      }

      JsonArray jsonArrayrangeFilters = jsonObj.getAsJsonArray("rangeFilters");
      // validate the required field `rangeFilters` (array)
      for (int i = 0; i < jsonArrayrangeFilters.size(); i++) {
        RangeFilter.validateJsonElement(jsonArrayrangeFilters.get(i));
      };
      // validate the required field `template`
      RuleTemplate.validateJsonElement(jsonObj.get("template"));
      // ensure the json data is an array
      if (!jsonObj.get("boostedProductBuckets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boostedProductBuckets` to be an array in the JSON string but got `%s`", jsonObj.get("boostedProductBuckets").toString()));
      }

      JsonArray jsonArrayboostedProductBuckets = jsonObj.getAsJsonArray("boostedProductBuckets");
      // validate the required field `boostedProductBuckets` (array)
      for (int i = 0; i < jsonArrayboostedProductBuckets.size(); i++) {
        BoostedProductBucket.validateJsonElement(jsonArrayboostedProductBuckets.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("pinnedRefinements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinnedRefinements` to be an array in the JSON string but got `%s`", jsonObj.get("pinnedRefinements").toString()));
      }

      JsonArray jsonArraypinnedRefinements = jsonObj.getAsJsonArray("pinnedRefinements");
      // validate the required field `pinnedRefinements` (array)
      for (int i = 0; i < jsonArraypinnedRefinements.size(); i++) {
        PinnedRefinement.validateJsonElement(jsonArraypinnedRefinements.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("variants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
      }

      JsonArray jsonArrayvariants = jsonObj.getAsJsonArray("variants");
      // validate the required field `variants` (array)
      for (int i = 0; i < jsonArrayvariants.size(); i++) {
        ExperimentVariant.validateJsonElement(jsonArrayvariants.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleConfiguration>() {
           @Override
           public void write(JsonWriter out, RuleConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleConfiguration
  * @throws IOException if the JSON string is invalid with respect to RuleConfiguration
  */
  public static RuleConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleConfiguration.class);
  }

 /**
  * Convert an instance of RuleConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

