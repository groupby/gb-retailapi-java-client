/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupbyinc.retailapi.model.NavigationTypeDto;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Refinement the shopper has selected for filtering.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T09:51:40.117075497-04:00[America/Toronto]")
public class SelectedRefinementDto {
  public static final String SERIALIZED_NAME_NAVIGATION_NAME = "navigationName";
  @SerializedName(SERIALIZED_NAME_NAVIGATION_NAME)
  private String navigationName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private NavigationTypeDto type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_LOW = "low";
  @SerializedName(SERIALIZED_NAME_LOW)
  private Double low;

  public static final String SERIALIZED_NAME_HIGH = "high";
  @SerializedName(SERIALIZED_NAME_HIGH)
  private Double high;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_OR = "or";
  @SerializedName(SERIALIZED_NAME_OR)
  private Boolean or;

  public SelectedRefinementDto() {
  }

  public SelectedRefinementDto navigationName(String navigationName) {
    
    this.navigationName = navigationName;
    return this;
  }

   /**
   * The name of the navigation the refinement is for.
   * @return navigationName
  **/
  @javax.annotation.Nonnull
  public String getNavigationName() {
    return navigationName;
  }


  public void setNavigationName(String navigationName) {
    this.navigationName = navigationName;
  }


  public SelectedRefinementDto type(NavigationTypeDto type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public NavigationTypeDto getType() {
    return type;
  }


  public void setType(NavigationTypeDto type) {
    this.type = type;
  }


  public SelectedRefinementDto value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Value of selected refinement, if type is value.
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public SelectedRefinementDto low(Double low) {
    
    this.low = low;
    return this;
  }

   /**
   * The lowest end or value of the range, if applicable.
   * @return low
  **/
  @javax.annotation.Nullable
  public Double getLow() {
    return low;
  }


  public void setLow(Double low) {
    this.low = low;
  }


  public SelectedRefinementDto high(Double high) {
    
    this.high = high;
    return this;
  }

   /**
   * The highest end or value of the range, if applicable.
   * @return high
  **/
  @javax.annotation.Nullable
  public Double getHigh() {
    return high;
  }


  public void setHigh(Double high) {
    this.high = high;
  }


  public SelectedRefinementDto source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Field which is indicated that it is dynamic navigation.
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public SelectedRefinementDto or(Boolean or) {
    
    this.or = or;
    return this;
  }

   /**
   * Navigation multiselect. Indicate that it is possibly to select more than one navigation value due to search request.
   * @return or
  **/
  @javax.annotation.Nullable
  public Boolean getOr() {
    return or;
  }


  public void setOr(Boolean or) {
    this.or = or;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectedRefinementDto selectedRefinementDto = (SelectedRefinementDto) o;
    return Objects.equals(this.navigationName, selectedRefinementDto.navigationName) &&
        Objects.equals(this.type, selectedRefinementDto.type) &&
        Objects.equals(this.value, selectedRefinementDto.value) &&
        Objects.equals(this.low, selectedRefinementDto.low) &&
        Objects.equals(this.high, selectedRefinementDto.high) &&
        Objects.equals(this.source, selectedRefinementDto.source) &&
        Objects.equals(this.or, selectedRefinementDto.or);
  }

  @Override
  public int hashCode() {
    return Objects.hash(navigationName, type, value, low, high, source, or);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectedRefinementDto {\n");
    sb.append("    navigationName: ").append(toIndentedString(navigationName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    or: ").append(toIndentedString(or)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("navigationName");
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("low");
    openapiFields.add("high");
    openapiFields.add("source");
    openapiFields.add("or");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("navigationName");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SelectedRefinementDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelectedRefinementDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelectedRefinementDto is not found in the empty JSON string", SelectedRefinementDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelectedRefinementDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelectedRefinementDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SelectedRefinementDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("navigationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `navigationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("navigationName").toString()));
      }
      // validate the required field `type`
      NavigationTypeDto.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelectedRefinementDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelectedRefinementDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelectedRefinementDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelectedRefinementDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SelectedRefinementDto>() {
           @Override
           public void write(JsonWriter out, SelectedRefinementDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelectedRefinementDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SelectedRefinementDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SelectedRefinementDto
  * @throws IOException if the JSON string is invalid with respect to SelectedRefinementDto
  */
  public static SelectedRefinementDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelectedRefinementDto.class);
  }

 /**
  * Convert an instance of SelectedRefinementDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

