/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Object which is represent autocomplete request and encapsulate all passed parameters. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T09:40:02.999263865-04:00[America/Toronto]")
public class Request {
  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private String area;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public static final String SERIALIZED_NAME_SEARCH_ITEMS = "searchItems";
  @SerializedName(SERIALIZED_NAME_SEARCH_ITEMS)
  private Integer searchItems;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_ENABLE_ATTRIBUTE_SUGGESTION = "enableAttributeSuggestion";
  @SerializedName(SERIALIZED_NAME_ENABLE_ATTRIBUTE_SUGGESTION)
  private Boolean enableAttributeSuggestion;

  public static final String SERIALIZED_NAME_EXTENDED_SUGGESTIONS = "extendedSuggestions";
  @SerializedName(SERIALIZED_NAME_EXTENDED_SUGGESTIONS)
  private Boolean extendedSuggestions;

  public static final String SERIALIZED_NAME_EXTENDED_ATTRIBUTES = "extendedAttributes";
  @SerializedName(SERIALIZED_NAME_EXTENDED_ATTRIBUTES)
  private List<String> extendedAttributes;

  public static final String SERIALIZED_NAME_VISITOR_ID = "visitorId";
  @SerializedName(SERIALIZED_NAME_VISITOR_ID)
  private String visitorId;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private String site;

  public Request() {
  }

  public Request area(String area) {
    
    this.area = area;
    return this;
  }

   /**
   * Area i.e. &#39;Production&#39; Will not be used immediately. This will be useful when we eventually need to support a US area vs a Canada area. But this would require using the custom dataset instead of user-generated.
   * @return area
  **/
  @javax.annotation.Nonnull
  public String getArea() {
    return area;
  }


  public void setArea(String area) {
    this.area = area;
  }


  public Request collection(String collection) {
    
    this.collection = collection;
    return this;
  }

   /**
   * Name of the collection used to determine the retail backend to use. Usually it is name which is associated with retail project in command center (project configuration).
   * @return collection
  **/
  @javax.annotation.Nonnull
  public String getCollection() {
    return collection;
  }


  public void setCollection(String collection) {
    this.collection = collection;
  }


  public Request searchItems(Integer searchItems) {
    
    this.searchItems = searchItems;
    return this;
  }

   /**
   * Completion max suggestions. The maximum allowed max suggestions is 20.
   * minimum: 1
   * maximum: 20
   * @return searchItems
  **/
  @javax.annotation.Nonnull
  public Integer getSearchItems() {
    return searchItems;
  }


  public void setSearchItems(Integer searchItems) {
    this.searchItems = searchItems;
  }


  public Request query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * String. Required. The query used to generate suggestions. The maximum number of allowed characters is 255.
   * @return query
  **/
  @javax.annotation.Nonnull
  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  public Request enableAttributeSuggestion(Boolean enableAttributeSuggestion) {
    
    this.enableAttributeSuggestion = enableAttributeSuggestion;
    return this;
  }

   /**
   * Enable attribute suggestions, by setting the field enableAttributeSuggestion&#x3D;true in the API request. Then in response, there will be an additional field attributeResults to show direct match results on brands/categories  Note that attribute results directly come from the products we import and Google does not apply any cleaning on them. 
   * @return enableAttributeSuggestion
  **/
  @javax.annotation.Nullable
  public Boolean getEnableAttributeSuggestion() {
    return enableAttributeSuggestion;
  }


  public void setEnableAttributeSuggestion(Boolean enableAttributeSuggestion) {
    this.enableAttributeSuggestion = enableAttributeSuggestion;
  }


  public Request extendedSuggestions(Boolean extendedSuggestions) {
    
    this.extendedSuggestions = extendedSuggestions;
    return this;
  }

   /**
   * Optional param which is define if extended suggestions will be returned in autocomplete response or not. Possibly values: true, false, not specified (If not specified default collection setting will be used). 
   * @return extendedSuggestions
  **/
  @javax.annotation.Nullable
  public Boolean getExtendedSuggestions() {
    return extendedSuggestions;
  }


  public void setExtendedSuggestions(Boolean extendedSuggestions) {
    this.extendedSuggestions = extendedSuggestions;
  }


  public Request extendedAttributes(List<String> extendedAttributes) {
    
    this.extendedAttributes = extendedAttributes;
    return this;
  }

  public Request addExtendedAttributesItem(String extendedAttributesItem) {
    if (this.extendedAttributes == null) {
      this.extendedAttributes = new ArrayList<>();
    }
    this.extendedAttributes.add(extendedAttributesItem);
    return this;
  }

   /**
   *     List with extended attributes which are would be returned in autocomplete response.     Requires extendedSuggestions to be enabled using search param or on collection layer. 
   * @return extendedAttributes
  **/
  @javax.annotation.Nullable
  public List<String> getExtendedAttributes() {
    return extendedAttributes;
  }


  public void setExtendedAttributes(List<String> extendedAttributes) {
    this.extendedAttributes = extendedAttributes;
  }


  public Request visitorId(String visitorId) {
    
    this.visitorId = visitorId;
    return this;
  }

   /**
   * String. Not required field. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. 
   * @return visitorId
  **/
  @javax.annotation.Nullable
  public String getVisitorId() {
    return visitorId;
  }


  public void setVisitorId(String visitorId) {
    this.visitorId = visitorId;
  }


  public Request site(String site) {
    
    this.site = site;
    return this;
  }

   /**
   * Name of site filter. If not specified, the specified area&#39;s default site will be applied if configured in Command Center. To not use default specify empty value i.e.\&quot;\&quot;.  If the site doesn&#39;t exist then the search will execute without the site filter.
   * @return site
  **/
  @javax.annotation.Nullable
  public String getSite() {
    return site;
  }


  public void setSite(String site) {
    this.site = site;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.area, request.area) &&
        Objects.equals(this.collection, request.collection) &&
        Objects.equals(this.searchItems, request.searchItems) &&
        Objects.equals(this.query, request.query) &&
        Objects.equals(this.enableAttributeSuggestion, request.enableAttributeSuggestion) &&
        Objects.equals(this.extendedSuggestions, request.extendedSuggestions) &&
        Objects.equals(this.extendedAttributes, request.extendedAttributes) &&
        Objects.equals(this.visitorId, request.visitorId) &&
        Objects.equals(this.site, request.site);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(area, collection, searchItems, query, enableAttributeSuggestion, extendedSuggestions, extendedAttributes, visitorId, site);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    searchItems: ").append(toIndentedString(searchItems)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    enableAttributeSuggestion: ").append(toIndentedString(enableAttributeSuggestion)).append("\n");
    sb.append("    extendedSuggestions: ").append(toIndentedString(extendedSuggestions)).append("\n");
    sb.append("    extendedAttributes: ").append(toIndentedString(extendedAttributes)).append("\n");
    sb.append("    visitorId: ").append(toIndentedString(visitorId)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("area");
    openapiFields.add("collection");
    openapiFields.add("searchItems");
    openapiFields.add("query");
    openapiFields.add("enableAttributeSuggestion");
    openapiFields.add("extendedSuggestions");
    openapiFields.add("extendedAttributes");
    openapiFields.add("visitorId");
    openapiFields.add("site");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("area");
    openapiRequiredFields.add("collection");
    openapiRequiredFields.add("searchItems");
    openapiRequiredFields.add("query");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Request
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Request is not found in the empty JSON string", Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("area").toString()));
      }
      if (!jsonObj.get("collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection").toString()));
      }
      if (!jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("extendedAttributes") != null && !jsonObj.get("extendedAttributes").isJsonNull() && !jsonObj.get("extendedAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extendedAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("extendedAttributes").toString()));
      }
      if ((jsonObj.get("visitorId") != null && !jsonObj.get("visitorId").isJsonNull()) && !jsonObj.get("visitorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitorId").toString()));
      }
      if ((jsonObj.get("site") != null && !jsonObj.get("site").isJsonNull()) && !jsonObj.get("site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Request.class));

       return (TypeAdapter<T>) new TypeAdapter<Request>() {
           @Override
           public void write(JsonWriter out, Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Request
  * @throws IOException if the JSON string is invalid with respect to Request
  */
  public static Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Request.class);
  }

 /**
  * Convert an instance of Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

