/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupbyinc.retailapi.model.FulfillmentInfo;
import com.groupbyinc.retailapi.model.Image;
import com.groupbyinc.retailapi.model.ProductCustomAttribute;
import com.groupbyinc.retailapi.model.ProductDtoAudience;
import com.groupbyinc.retailapi.model.ProductDtoAvailableTime;
import com.groupbyinc.retailapi.model.ProductDtoColorInfo;
import com.groupbyinc.retailapi.model.ProductDtoPriceInfo;
import com.groupbyinc.retailapi.model.ProductDtoPublishTime;
import com.groupbyinc.retailapi.model.ProductDtoRating;
import com.groupbyinc.retailapi.model.ProductDtoRetrievableFields;
import com.groupbyinc.retailapi.model.Promotion;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Product representation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-20T17:52:51.787881444-04:00[America/Toronto]")
public class ProductDto {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PRIMARY_PRODUCT_ID = "primaryProductId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PRODUCT_ID)
  private String primaryProductId;

  public static final String SERIALIZED_NAME_COLLECTION_MEMBER_IDS = "collectionMemberIds";
  @SerializedName(SERIALIZED_NAME_COLLECTION_MEMBER_IDS)
  private List<String> collectionMemberIds;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private String gtin;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_BRANDS = "brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<String> brands;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, ProductCustomAttribute> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;

  public static final String SERIALIZED_NAME_PRICE_INFO = "priceInfo";
  @SerializedName(SERIALIZED_NAME_PRICE_INFO)
  private ProductDtoPriceInfo priceInfo;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private ProductDtoRating rating;

  public static final String SERIALIZED_NAME_AVAILABLE_TIME = "availableTime";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TIME)
  private ProductDtoAvailableTime availableTime;

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private String availability;

  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "availableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_FULFILLMENT_INFOS = "fulfillmentInfos";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_INFOS)
  private List<FulfillmentInfo> fulfillmentInfos;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images;

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private ProductDtoAudience audience;

  public static final String SERIALIZED_NAME_COLOR_INFO = "colorInfo";
  @SerializedName(SERIALIZED_NAME_COLOR_INFO)
  private ProductDtoColorInfo colorInfo;

  public static final String SERIALIZED_NAME_SIZES = "sizes";
  @SerializedName(SERIALIZED_NAME_SIZES)
  private List<String> sizes;

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<String> materials;

  public static final String SERIALIZED_NAME_PATTERNS = "patterns";
  @SerializedName(SERIALIZED_NAME_PATTERNS)
  private List<String> patterns;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<String> conditions;

  public static final String SERIALIZED_NAME_PUBLISH_TIME = "publishTime";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TIME)
  private ProductDtoPublishTime publishTime;

  public static final String SERIALIZED_NAME_RETRIEVABLE_FIELDS = "retrievableFields";
  @SerializedName(SERIALIZED_NAME_RETRIEVABLE_FIELDS)
  private ProductDtoRetrievableFields retrievableFields;

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<Promotion> promotions;

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<ProductDto> variants;

  public ProductDto() {
  }

  public ProductDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Relative path to product in Google Retail system.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ProductDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Product id in Google Retail system.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ProductDto type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Product type. Possible values: PRIMARY, VARIANT. If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public ProductDto primaryProductId(String primaryProductId) {
    
    this.primaryProductId = primaryProductId;
    return this;
  }

   /**
   * Product ID that is primary in relation to the current one
   * @return primaryProductId
  **/
  @javax.annotation.Nullable
  public String getPrimaryProductId() {
    return primaryProductId;
  }


  public void setPrimaryProductId(String primaryProductId) {
    this.primaryProductId = primaryProductId;
  }


  public ProductDto collectionMemberIds(List<String> collectionMemberIds) {
    
    this.collectionMemberIds = collectionMemberIds;
    return this;
  }

  public ProductDto addCollectionMemberIdsItem(String collectionMemberIdsItem) {
    if (this.collectionMemberIds == null) {
      this.collectionMemberIds = new ArrayList<>();
    }
    this.collectionMemberIds.add(collectionMemberIdsItem);
    return this;
  }

   /**
   * The of the collection members when product type is COLLECTION
   * @return collectionMemberIds
  **/
  @javax.annotation.Nullable
  public List<String> getCollectionMemberIds() {
    return collectionMemberIds;
  }


  public void setCollectionMemberIds(List<String> collectionMemberIds) {
    this.collectionMemberIds = collectionMemberIds;
  }


  public ProductDto gtin(String gtin) {
    
    this.gtin = gtin;
    return this;
  }

   /**
   * Global Trade Item Number can be used by a company to uniquely identify all of its trade items.GTIN defines trade items as products or services that are priced, ordered or invoiced at any point in the supply chain.
   * @return gtin
  **/
  @javax.annotation.Nullable
  public String getGtin() {
    return gtin;
  }


  public void setGtin(String gtin) {
    this.gtin = gtin;
  }


  public ProductDto categories(List<String> categories) {
    
    this.categories = categories;
    return this;
  }

  public ProductDto addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Product categories (array).
   * @return categories
  **/
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }


  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public ProductDto title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Product title.
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ProductDto brands(List<String> brands) {
    
    this.brands = brands;
    return this;
  }

  public ProductDto addBrandsItem(String brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

   /**
   * Product brands.
   * @return brands
  **/
  @javax.annotation.Nullable
  public List<String> getBrands() {
    return brands;
  }


  public void setBrands(List<String> brands) {
    this.brands = brands;
  }


  public ProductDto description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Product description.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ProductDto languageCode(String languageCode) {
    
    this.languageCode = languageCode;
    return this;
  }

   /**
   * Language of the title/description and other string attributes. Use language tags defined by [BCP 47][https://www.rfc-editor.org/rfc/bcp/bcp47.txt]. For product search this field is in use. It defaults to &#39;en-US&#39; if unset.
   * @return languageCode
  **/
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }


  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public ProductDto attributes(Map<String, ProductCustomAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public ProductDto putAttributesItem(String key, ProductCustomAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer.  Max entries count: 200. Length limit of 128 characters.
   * @return attributes
  **/
  @javax.annotation.Nullable
  public Map<String, ProductCustomAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, ProductCustomAttribute> attributes) {
    this.attributes = attributes;
  }


  public ProductDto tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public ProductDto addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Product tags (array).
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ProductDto priceInfo(ProductDtoPriceInfo priceInfo) {
    
    this.priceInfo = priceInfo;
    return this;
  }

   /**
   * Get priceInfo
   * @return priceInfo
  **/
  @javax.annotation.Nullable
  public ProductDtoPriceInfo getPriceInfo() {
    return priceInfo;
  }


  public void setPriceInfo(ProductDtoPriceInfo priceInfo) {
    this.priceInfo = priceInfo;
  }


  public ProductDto rating(ProductDtoRating rating) {
    
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  public ProductDtoRating getRating() {
    return rating;
  }


  public void setRating(ProductDtoRating rating) {
    this.rating = rating;
  }


  public ProductDto availableTime(ProductDtoAvailableTime availableTime) {
    
    this.availableTime = availableTime;
    return this;
  }

   /**
   * Get availableTime
   * @return availableTime
  **/
  @javax.annotation.Nullable
  public ProductDtoAvailableTime getAvailableTime() {
    return availableTime;
  }


  public void setAvailableTime(ProductDtoAvailableTime availableTime) {
    this.availableTime = availableTime;
  }


  public ProductDto availability(String availability) {
    
    this.availability = availability;
    return this;
  }

   /**
   * The online availability of the product. Default to IN_STOCK
   * @return availability
  **/
  @javax.annotation.Nullable
  public String getAvailability() {
    return availability;
  }


  public void setAvailability(String availability) {
    this.availability = availability;
  }


  public ProductDto availableQuantity(Integer availableQuantity) {
    
    this.availableQuantity = availableQuantity;
    return this;
  }

   /**
   * The available quantity of the item.
   * @return availableQuantity
  **/
  @javax.annotation.Nullable
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }


  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public ProductDto fulfillmentInfos(List<FulfillmentInfo> fulfillmentInfos) {
    
    this.fulfillmentInfos = fulfillmentInfos;
    return this;
  }

  public ProductDto addFulfillmentInfosItem(FulfillmentInfo fulfillmentInfosItem) {
    if (this.fulfillmentInfos == null) {
      this.fulfillmentInfos = new ArrayList<>();
    }
    this.fulfillmentInfos.add(fulfillmentInfosItem);
    return this;
  }

   /**
   * Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods.
   * @return fulfillmentInfos
  **/
  @javax.annotation.Nullable
  public List<FulfillmentInfo> getFulfillmentInfos() {
    return fulfillmentInfos;
  }


  public void setFulfillmentInfos(List<FulfillmentInfo> fulfillmentInfos) {
    this.fulfillmentInfos = fulfillmentInfos;
  }


  public ProductDto uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Link to the appropriate product.
   * @return uri
  **/
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }


  public ProductDto images(List<Image> images) {
    
    this.images = images;
    return this;
  }

  public ProductDto addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Product Image.
   * @return images
  **/
  @javax.annotation.Nullable
  public List<Image> getImages() {
    return images;
  }


  public void setImages(List<Image> images) {
    this.images = images;
  }


  public ProductDto audience(ProductDtoAudience audience) {
    
    this.audience = audience;
    return this;
  }

   /**
   * Get audience
   * @return audience
  **/
  @javax.annotation.Nullable
  public ProductDtoAudience getAudience() {
    return audience;
  }


  public void setAudience(ProductDtoAudience audience) {
    this.audience = audience;
  }


  public ProductDto colorInfo(ProductDtoColorInfo colorInfo) {
    
    this.colorInfo = colorInfo;
    return this;
  }

   /**
   * Get colorInfo
   * @return colorInfo
  **/
  @javax.annotation.Nullable
  public ProductDtoColorInfo getColorInfo() {
    return colorInfo;
  }


  public void setColorInfo(ProductDtoColorInfo colorInfo) {
    this.colorInfo = colorInfo;
  }


  public ProductDto sizes(List<String> sizes) {
    
    this.sizes = sizes;
    return this;
  }

  public ProductDto addSizesItem(String sizesItem) {
    if (this.sizes == null) {
      this.sizes = new ArrayList<>();
    }
    this.sizes.add(sizesItem);
    return this;
  }

   /**
   * Product sizes (array).
   * @return sizes
  **/
  @javax.annotation.Nullable
  public List<String> getSizes() {
    return sizes;
  }


  public void setSizes(List<String> sizes) {
    this.sizes = sizes;
  }


  public ProductDto materials(List<String> materials) {
    
    this.materials = materials;
    return this;
  }

  public ProductDto addMaterialsItem(String materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

   /**
   * The material of the product. For example, &#39;leather&#39;, &#39;wooden&#39;. A maximum of 20 values are allowed. Length limit of 128 characters
   * @return materials
  **/
  @javax.annotation.Nullable
  public List<String> getMaterials() {
    return materials;
  }


  public void setMaterials(List<String> materials) {
    this.materials = materials;
  }


  public ProductDto patterns(List<String> patterns) {
    
    this.patterns = patterns;
    return this;
  }

  public ProductDto addPatternsItem(String patternsItem) {
    if (this.patterns == null) {
      this.patterns = new ArrayList<>();
    }
    this.patterns.add(patternsItem);
    return this;
  }

   /**
   * The pattern or graphic print of the product. For example, &#39;striped&#39;, &#39;polka dot&#39;, &#39;paisley&#39;. A maximum of 20 values are allowed per product. Length limit of 128 characters.
   * @return patterns
  **/
  @javax.annotation.Nullable
  public List<String> getPatterns() {
    return patterns;
  }


  public void setPatterns(List<String> patterns) {
    this.patterns = patterns;
  }


  public ProductDto conditions(List<String> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public ProductDto addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * The condition of the product. Strongly encouraged to use the standardvalues: &#39;new&#39;, &#39;refurbished&#39;, &#39;used&#39;. A maximum of 5 values are allowed per product. Length limit of 128 characters.
   * @return conditions
  **/
  @javax.annotation.Nullable
  public List<String> getConditions() {
    return conditions;
  }


  public void setConditions(List<String> conditions) {
    this.conditions = conditions;
  }


  public ProductDto publishTime(ProductDtoPublishTime publishTime) {
    
    this.publishTime = publishTime;
    return this;
  }

   /**
   * Get publishTime
   * @return publishTime
  **/
  @javax.annotation.Nullable
  public ProductDtoPublishTime getPublishTime() {
    return publishTime;
  }


  public void setPublishTime(ProductDtoPublishTime publishTime) {
    this.publishTime = publishTime;
  }


  public ProductDto retrievableFields(ProductDtoRetrievableFields retrievableFields) {
    
    this.retrievableFields = retrievableFields;
    return this;
  }

   /**
   * Get retrievableFields
   * @return retrievableFields
  **/
  @javax.annotation.Nullable
  public ProductDtoRetrievableFields getRetrievableFields() {
    return retrievableFields;
  }


  public void setRetrievableFields(ProductDtoRetrievableFields retrievableFields) {
    this.retrievableFields = retrievableFields;
  }


  public ProductDto promotions(List<Promotion> promotions) {
    
    this.promotions = promotions;
    return this;
  }

  public ProductDto addPromotionsItem(Promotion promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

   /**
   * The promotions applied to the product. A maximum of 10 values are allowed per product.
   * @return promotions
  **/
  @javax.annotation.Nullable
  public List<Promotion> getPromotions() {
    return promotions;
  }


  public void setPromotions(List<Promotion> promotions) {
    this.promotions = promotions;
  }


  public ProductDto variants(List<ProductDto> variants) {
    
    this.variants = variants;
    return this;
  }

  public ProductDto addVariantsItem(ProductDto variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

   /**
   * If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
   * @return variants
  **/
  @javax.annotation.Nullable
  public List<ProductDto> getVariants() {
    return variants;
  }


  public void setVariants(List<ProductDto> variants) {
    this.variants = variants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductDto productDto = (ProductDto) o;
    return Objects.equals(this.name, productDto.name) &&
        Objects.equals(this.id, productDto.id) &&
        Objects.equals(this.type, productDto.type) &&
        Objects.equals(this.primaryProductId, productDto.primaryProductId) &&
        Objects.equals(this.collectionMemberIds, productDto.collectionMemberIds) &&
        Objects.equals(this.gtin, productDto.gtin) &&
        Objects.equals(this.categories, productDto.categories) &&
        Objects.equals(this.title, productDto.title) &&
        Objects.equals(this.brands, productDto.brands) &&
        Objects.equals(this.description, productDto.description) &&
        Objects.equals(this.languageCode, productDto.languageCode) &&
        Objects.equals(this.attributes, productDto.attributes) &&
        Objects.equals(this.tags, productDto.tags) &&
        Objects.equals(this.priceInfo, productDto.priceInfo) &&
        Objects.equals(this.rating, productDto.rating) &&
        Objects.equals(this.availableTime, productDto.availableTime) &&
        Objects.equals(this.availability, productDto.availability) &&
        Objects.equals(this.availableQuantity, productDto.availableQuantity) &&
        Objects.equals(this.fulfillmentInfos, productDto.fulfillmentInfos) &&
        Objects.equals(this.uri, productDto.uri) &&
        Objects.equals(this.images, productDto.images) &&
        Objects.equals(this.audience, productDto.audience) &&
        Objects.equals(this.colorInfo, productDto.colorInfo) &&
        Objects.equals(this.sizes, productDto.sizes) &&
        Objects.equals(this.materials, productDto.materials) &&
        Objects.equals(this.patterns, productDto.patterns) &&
        Objects.equals(this.conditions, productDto.conditions) &&
        Objects.equals(this.publishTime, productDto.publishTime) &&
        Objects.equals(this.retrievableFields, productDto.retrievableFields) &&
        Objects.equals(this.promotions, productDto.promotions) &&
        Objects.equals(this.variants, productDto.variants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, type, primaryProductId, collectionMemberIds, gtin, categories, title, brands, description, languageCode, attributes, tags, priceInfo, rating, availableTime, availability, availableQuantity, fulfillmentInfos, uri, images, audience, colorInfo, sizes, materials, patterns, conditions, publishTime, retrievableFields, promotions, variants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    primaryProductId: ").append(toIndentedString(primaryProductId)).append("\n");
    sb.append("    collectionMemberIds: ").append(toIndentedString(collectionMemberIds)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    priceInfo: ").append(toIndentedString(priceInfo)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    availableTime: ").append(toIndentedString(availableTime)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    fulfillmentInfos: ").append(toIndentedString(fulfillmentInfos)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    colorInfo: ").append(toIndentedString(colorInfo)).append("\n");
    sb.append("    sizes: ").append(toIndentedString(sizes)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    patterns: ").append(toIndentedString(patterns)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    publishTime: ").append(toIndentedString(publishTime)).append("\n");
    sb.append("    retrievableFields: ").append(toIndentedString(retrievableFields)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("primaryProductId");
    openapiFields.add("collectionMemberIds");
    openapiFields.add("gtin");
    openapiFields.add("categories");
    openapiFields.add("title");
    openapiFields.add("brands");
    openapiFields.add("description");
    openapiFields.add("languageCode");
    openapiFields.add("attributes");
    openapiFields.add("tags");
    openapiFields.add("priceInfo");
    openapiFields.add("rating");
    openapiFields.add("availableTime");
    openapiFields.add("availability");
    openapiFields.add("availableQuantity");
    openapiFields.add("fulfillmentInfos");
    openapiFields.add("uri");
    openapiFields.add("images");
    openapiFields.add("audience");
    openapiFields.add("colorInfo");
    openapiFields.add("sizes");
    openapiFields.add("materials");
    openapiFields.add("patterns");
    openapiFields.add("conditions");
    openapiFields.add("publishTime");
    openapiFields.add("retrievableFields");
    openapiFields.add("promotions");
    openapiFields.add("variants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProductDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductDto is not found in the empty JSON string", ProductDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("primaryProductId") != null && !jsonObj.get("primaryProductId").isJsonNull()) && !jsonObj.get("primaryProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryProductId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collectionMemberIds") != null && !jsonObj.get("collectionMemberIds").isJsonNull() && !jsonObj.get("collectionMemberIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionMemberIds` to be an array in the JSON string but got `%s`", jsonObj.get("collectionMemberIds").toString()));
      }
      if ((jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull()) && !jsonObj.get("gtin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("brands") != null && !jsonObj.get("brands").isJsonNull() && !jsonObj.get("brands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brands` to be an array in the JSON string but got `%s`", jsonObj.get("brands").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `priceInfo`
      if (jsonObj.get("priceInfo") != null && !jsonObj.get("priceInfo").isJsonNull()) {
        ProductDtoPriceInfo.validateJsonElement(jsonObj.get("priceInfo"));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        ProductDtoRating.validateJsonElement(jsonObj.get("rating"));
      }
      // validate the optional field `availableTime`
      if (jsonObj.get("availableTime") != null && !jsonObj.get("availableTime").isJsonNull()) {
        ProductDtoAvailableTime.validateJsonElement(jsonObj.get("availableTime"));
      }
      if ((jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) && !jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      if (jsonObj.get("fulfillmentInfos") != null && !jsonObj.get("fulfillmentInfos").isJsonNull()) {
        JsonArray jsonArrayfulfillmentInfos = jsonObj.getAsJsonArray("fulfillmentInfos");
        if (jsonArrayfulfillmentInfos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fulfillmentInfos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fulfillmentInfos` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillmentInfos").toString()));
          }

          // validate the optional field `fulfillmentInfos` (array)
          for (int i = 0; i < jsonArrayfulfillmentInfos.size(); i++) {
            FulfillmentInfo.validateJsonElement(jsonArrayfulfillmentInfos.get(i));
          };
        }
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // validate the optional field `audience`
      if (jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) {
        ProductDtoAudience.validateJsonElement(jsonObj.get("audience"));
      }
      // validate the optional field `colorInfo`
      if (jsonObj.get("colorInfo") != null && !jsonObj.get("colorInfo").isJsonNull()) {
        ProductDtoColorInfo.validateJsonElement(jsonObj.get("colorInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sizes") != null && !jsonObj.get("sizes").isJsonNull() && !jsonObj.get("sizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizes` to be an array in the JSON string but got `%s`", jsonObj.get("sizes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonNull() && !jsonObj.get("materials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("patterns") != null && !jsonObj.get("patterns").isJsonNull() && !jsonObj.get("patterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patterns` to be an array in the JSON string but got `%s`", jsonObj.get("patterns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull() && !jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
      // validate the optional field `publishTime`
      if (jsonObj.get("publishTime") != null && !jsonObj.get("publishTime").isJsonNull()) {
        ProductDtoPublishTime.validateJsonElement(jsonObj.get("publishTime"));
      }
      // validate the optional field `retrievableFields`
      if (jsonObj.get("retrievableFields") != null && !jsonObj.get("retrievableFields").isJsonNull()) {
        ProductDtoRetrievableFields.validateJsonElement(jsonObj.get("retrievableFields"));
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            Promotion.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull()) {
        JsonArray jsonArrayvariants = jsonObj.getAsJsonArray("variants");
        if (jsonArrayvariants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
          }

          // validate the optional field `variants` (array)
          for (int i = 0; i < jsonArrayvariants.size(); i++) {
            ProductDto.validateJsonElement(jsonArrayvariants.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductDto>() {
           @Override
           public void write(JsonWriter out, ProductDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductDto
  * @throws IOException if the JSON string is invalid with respect to ProductDto
  */
  public static ProductDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductDto.class);
  }

 /**
  * Convert an instance of ProductDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

