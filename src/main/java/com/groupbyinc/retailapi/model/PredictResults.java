/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupbyinc.retailapi.model.FilterParameter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Prediction result including list of recommendations based on provided inputs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T09:51:40.117075497-04:00[America/Toronto]")
public class PredictResults {
  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Object> warnings;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<Map<String, Object>> products;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<Map<String, Object>> records;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_MODEL_NAME = "modelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private String modelType;

  public static final String SERIALIZED_NAME_OPTIMIZATION_OBJECTIVE = "optimizationObjective";
  @SerializedName(SERIALIZED_NAME_OPTIMIZATION_OBJECTIVE)
  private String optimizationObjective;

  public static final String SERIALIZED_NAME_FILTER_SET = "filterSet";
  @SerializedName(SERIALIZED_NAME_FILTER_SET)
  private String filterSet;

  public static final String SERIALIZED_NAME_RAW_FILTER = "rawFilter";
  @SerializedName(SERIALIZED_NAME_RAW_FILTER)
  private String rawFilter;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<FilterParameter> filters;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public PredictResults() {
  }

  public PredictResults warnings(List<Object> warnings) {
    
    this.warnings = warnings;
    return this;
  }

  public PredictResults addWarningsItem(Object warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Warnings collected with validation and Recommendations AI API issues.
   * @return warnings
  **/
  @javax.annotation.Nullable
  public List<Object> getWarnings() {
    return warnings;
  }


  public void setWarnings(List<Object> warnings) {
    this.warnings = warnings;
  }


  public PredictResults products(List<Map<String, Object>> products) {
    
    this.products = products;
    return this;
  }

  public PredictResults addProductsItem(Map<String, Object> productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * Recommendations built by Recommendations AI model.
   * @return products
  **/
  @javax.annotation.Nullable
  public List<Map<String, Object>> getProducts() {
    return products;
  }


  public void setProducts(List<Map<String, Object>> products) {
    this.products = products;
  }


  public PredictResults records(List<Map<String, Object>> records) {
    
    this.records = records;
    return this;
  }

  public PredictResults addRecordsItem(Map<String, Object> recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Recommendations built by Recommendations AI model.
   * @return records
  **/
  @javax.annotation.Nullable
  public List<Map<String, Object>> getRecords() {
    return records;
  }


  public void setRecords(List<Map<String, Object>> records) {
    this.records = records;
  }


  public PredictResults modelId(String modelId) {
    
    this.modelId = modelId;
    return this;
  }

   /**
   * Model Id used for predictions
   * @return modelId
  **/
  @javax.annotation.Nullable
  public String getModelId() {
    return modelId;
  }


  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public PredictResults modelName(String modelName) {
    
    this.modelName = modelName;
    return this;
  }

   /**
   * Model Name used for predictions
   * @return modelName
  **/
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }


  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public PredictResults modelType(String modelType) {
    
    this.modelType = modelType;
    return this;
  }

   /**
   *   Currently supported values:   &#x60;recommended-for-you&#x60;   &#x60;others-you-may-like&#x60;,   &#x60;frequently-bought-together&#x60;   &#x60;page-optimization&#x60;   &#x60;similar-items&#x60;,   &#x60;buy-it-again&#x60;   &#x60;on-sale-items&#x60;   &#x60;recently-viewed&#x60;    This field together with optimization_objective describe model metadata to use to control model training and   serving. See https://cloud.google.com/retail/docs/models for more details. 
   * @return modelType
  **/
  @javax.annotation.Nullable
  public String getModelType() {
    return modelType;
  }


  public void setModelType(String modelType) {
    this.modelType = modelType;
  }


  public PredictResults optimizationObjective(String optimizationObjective) {
    
    this.optimizationObjective = optimizationObjective;
    return this;
  }

   /**
   *   Currently supported values: &#x60;ctr&#x60;, &#x60;cvr&#x60;, &#x60;revenue-per-order&#x60;.     If not specified, we choose default based on model type. Default depends on type of recommendation:   &#x60;recommended-for-you&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;others-you-may-like&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;frequently-bought-together&#x60; &#x3D;&gt; &#x60;revenue_per_order&#x60;    This field together with modelType describe model metadata to use to control model training and serving.   See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which   combination of parameters are valid. 
   * @return optimizationObjective
  **/
  @javax.annotation.Nullable
  public String getOptimizationObjective() {
    return optimizationObjective;
  }


  public void setOptimizationObjective(String optimizationObjective) {
    this.optimizationObjective = optimizationObjective;
  }


  public PredictResults filterSet(String filterSet) {
    
    this.filterSet = filterSet;
    return this;
  }

   /**
   * Filter set applied to the recommendation
   * @return filterSet
  **/
  @javax.annotation.Nullable
  public String getFilterSet() {
    return filterSet;
  }


  public void setFilterSet(String filterSet) {
    this.filterSet = filterSet;
  }


  public PredictResults rawFilter(String rawFilter) {
    
    this.rawFilter = rawFilter;
    return this;
  }

   /**
   * RawFilter applied to the recommendation
   * @return rawFilter
  **/
  @javax.annotation.Nullable
  public String getRawFilter() {
    return rawFilter;
  }


  public void setRawFilter(String rawFilter) {
    this.rawFilter = rawFilter;
  }


  public PredictResults filters(List<FilterParameter> filters) {
    
    this.filters = filters;
    return this;
  }

  public PredictResults addFiltersItem(FilterParameter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Filters applied to the recommendation
   * @return filters
  **/
  @javax.annotation.Nullable
  public List<FilterParameter> getFilters() {
    return filters;
  }


  public void setFilters(List<FilterParameter> filters) {
    this.filters = filters;
  }


  public PredictResults metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictResults predictResults = (PredictResults) o;
    return Objects.equals(this.warnings, predictResults.warnings) &&
        Objects.equals(this.products, predictResults.products) &&
        Objects.equals(this.records, predictResults.records) &&
        Objects.equals(this.modelId, predictResults.modelId) &&
        Objects.equals(this.modelName, predictResults.modelName) &&
        Objects.equals(this.modelType, predictResults.modelType) &&
        Objects.equals(this.optimizationObjective, predictResults.optimizationObjective) &&
        Objects.equals(this.filterSet, predictResults.filterSet) &&
        Objects.equals(this.rawFilter, predictResults.rawFilter) &&
        Objects.equals(this.filters, predictResults.filters) &&
        Objects.equals(this.metadata, predictResults.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warnings, products, records, modelId, modelName, modelType, optimizationObjective, filterSet, rawFilter, filters, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictResults {\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    optimizationObjective: ").append(toIndentedString(optimizationObjective)).append("\n");
    sb.append("    filterSet: ").append(toIndentedString(filterSet)).append("\n");
    sb.append("    rawFilter: ").append(toIndentedString(rawFilter)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("warnings");
    openapiFields.add("products");
    openapiFields.add("records");
    openapiFields.add("modelId");
    openapiFields.add("modelName");
    openapiFields.add("modelType");
    openapiFields.add("optimizationObjective");
    openapiFields.add("filterSet");
    openapiFields.add("rawFilter");
    openapiFields.add("filters");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PredictResults
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictResults is not found in the empty JSON string", PredictResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull() && !jsonObj.get("records").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
      }
      if ((jsonObj.get("modelId") != null && !jsonObj.get("modelId").isJsonNull()) && !jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if ((jsonObj.get("modelName") != null && !jsonObj.get("modelName").isJsonNull()) && !jsonObj.get("modelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelName").toString()));
      }
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      if ((jsonObj.get("optimizationObjective") != null && !jsonObj.get("optimizationObjective").isJsonNull()) && !jsonObj.get("optimizationObjective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimizationObjective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimizationObjective").toString()));
      }
      if ((jsonObj.get("filterSet") != null && !jsonObj.get("filterSet").isJsonNull()) && !jsonObj.get("filterSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterSet").toString()));
      }
      if ((jsonObj.get("rawFilter") != null && !jsonObj.get("rawFilter").isJsonNull()) && !jsonObj.get("rawFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawFilter").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            FilterParameter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictResults.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictResults>() {
           @Override
           public void write(JsonWriter out, PredictResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PredictResults given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PredictResults
  * @throws IOException if the JSON string is invalid with respect to PredictResults
  */
  public static PredictResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictResults.class);
  }

 /**
  * Convert an instance of PredictResults to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

