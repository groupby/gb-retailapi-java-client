/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * A custom attribute that is not explicitly modeled in product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-28T19:17:28.544199255-04:00[America/Toronto]")
public class ProductCustomAttribute {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private List<String> text;

  public static final String SERIALIZED_NAME_NUMBERS = "numbers";
  @SerializedName(SERIALIZED_NAME_NUMBERS)
  private List<Double> numbers;

  public static final String SERIALIZED_NAME_SEARCHABLE = "searchable";
  @SerializedName(SERIALIZED_NAME_SEARCHABLE)
  private Boolean searchable;

  public static final String SERIALIZED_NAME_INDEXABLE = "indexable";
  @SerializedName(SERIALIZED_NAME_INDEXABLE)
  private Boolean indexable;

  public ProductCustomAttribute() {
  }

  public ProductCustomAttribute text(List<String> text) {
    
    this.text = text;
    return this;
  }

  public ProductCustomAttribute addTextItem(String textItem) {
    if (this.text == null) {
      this.text = new ArrayList<>();
    }
    this.text.add(textItem);
    return this;
  }

   /**
   * The textual values of this custom attribute. At most 400 values are allowed. Empty values are not allowed. Length limit of 256 characters. Exactly one of text or numbers should be set.
   * @return text
  **/
  @javax.annotation.Nullable
  public List<String> getText() {
    return text;
  }


  public void setText(List<String> text) {
    this.text = text;
  }


  public ProductCustomAttribute numbers(List<Double> numbers) {
    
    this.numbers = numbers;
    return this;
  }

  public ProductCustomAttribute addNumbersItem(Double numbersItem) {
    if (this.numbers == null) {
      this.numbers = new ArrayList<>();
    }
    this.numbers.add(numbersItem);
    return this;
  }

   /**
   * The numerical values of this custom attribute. At most 400 values are allowed. Exactly one of text or numbers should be set.
   * @return numbers
  **/
  @javax.annotation.Nullable
  public List<Double> getNumbers() {
    return numbers;
  }


  public void setNumbers(List<Double> numbers) {
    this.numbers = numbers;
  }


  public ProductCustomAttribute searchable(Boolean searchable) {
    
    this.searchable = searchable;
    return this;
  }

   /**
   * If true, custom attribute values are searchable by text queries in. search. Only set if type text set.
   * @return searchable
  **/
  @javax.annotation.Nullable
  public Boolean getSearchable() {
    return searchable;
  }


  public void setSearchable(Boolean searchable) {
    this.searchable = searchable;
  }


  public ProductCustomAttribute indexable(Boolean indexable) {
    
    this.indexable = indexable;
    return this;
  }

   /**
   * If true, custom attribute values are indexed, so that it can be filtered, faceted or boosted in search.
   * @return indexable
  **/
  @javax.annotation.Nullable
  public Boolean getIndexable() {
    return indexable;
  }


  public void setIndexable(Boolean indexable) {
    this.indexable = indexable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductCustomAttribute productCustomAttribute = (ProductCustomAttribute) o;
    return Objects.equals(this.text, productCustomAttribute.text) &&
        Objects.equals(this.numbers, productCustomAttribute.numbers) &&
        Objects.equals(this.searchable, productCustomAttribute.searchable) &&
        Objects.equals(this.indexable, productCustomAttribute.indexable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, numbers, searchable, indexable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductCustomAttribute {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    numbers: ").append(toIndentedString(numbers)).append("\n");
    sb.append("    searchable: ").append(toIndentedString(searchable)).append("\n");
    sb.append("    indexable: ").append(toIndentedString(indexable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("text");
    openapiFields.add("numbers");
    openapiFields.add("searchable");
    openapiFields.add("indexable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProductCustomAttribute
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductCustomAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductCustomAttribute is not found in the empty JSON string", ProductCustomAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductCustomAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductCustomAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull() && !jsonObj.get("text").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be an array in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("numbers") != null && !jsonObj.get("numbers").isJsonNull() && !jsonObj.get("numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `numbers` to be an array in the JSON string but got `%s`", jsonObj.get("numbers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductCustomAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductCustomAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductCustomAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductCustomAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductCustomAttribute>() {
           @Override
           public void write(JsonWriter out, ProductCustomAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductCustomAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductCustomAttribute given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductCustomAttribute
  * @throws IOException if the JSON string is invalid with respect to ProductCustomAttribute
  */
  public static ProductCustomAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductCustomAttribute.class);
  }

 /**
  * Convert an instance of ProductCustomAttribute to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

