/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Information regarding a product in the proprietary Group By API format.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T09:40:02.999263865-04:00[America/Toronto]")
public class RecordDto {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_U = "_u";
  @SerializedName(SERIALIZED_NAME_U)
  private String u;

  public static final String SERIALIZED_NAME_T = "_t";
  @SerializedName(SERIALIZED_NAME_T)
  private String t;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public static final String SERIALIZED_NAME_ALL_META = "allMeta";
  @SerializedName(SERIALIZED_NAME_ALL_META)
  private Map<String, Object> allMeta = new HashMap<>();

  public RecordDto() {
  }

  public RecordDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifier of the record as an MD5 hash.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RecordDto u(String u) {
    
    this.u = u;
    return this;
  }

   /**
   * Logical URL of the record.
   * @return u
  **/
  @javax.annotation.Nullable
  public String getU() {
    return u;
  }


  public void setU(String u) {
    this.u = u;
  }


  public RecordDto t(String t) {
    
    this.t = t;
    return this;
  }

   /**
   * Title of the record.
   * @return t
  **/
  @javax.annotation.Nullable
  public String getT() {
    return t;
  }


  public void setT(String t) {
    this.t = t;
  }


  public RecordDto collection(String collection) {
    
    this.collection = collection;
    return this;
  }

   /**
   * Collection the record was queried from or resides.
   * @return collection
  **/
  @javax.annotation.Nullable
  public String getCollection() {
    return collection;
  }


  public void setCollection(String collection) {
    this.collection = collection;
  }


  public RecordDto allMeta(Map<String, Object> allMeta) {
    
    this.allMeta = allMeta;
    return this;
  }

  public RecordDto putAllMetaItem(String key, Object allMetaItem) {
    if (this.allMeta == null) {
      this.allMeta = new HashMap<>();
    }
    this.allMeta.put(key, allMetaItem);
    return this;
  }

   /**
   * All other metadata, read fields, the record has.
   * @return allMeta
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getAllMeta() {
    return allMeta;
  }


  public void setAllMeta(Map<String, Object> allMeta) {
    this.allMeta = allMeta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordDto recordDto = (RecordDto) o;
    return Objects.equals(this.id, recordDto.id) &&
        Objects.equals(this.u, recordDto.u) &&
        Objects.equals(this.t, recordDto.t) &&
        Objects.equals(this.collection, recordDto.collection) &&
        Objects.equals(this.allMeta, recordDto.allMeta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, u, t, collection, allMeta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    u: ").append(toIndentedString(u)).append("\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    allMeta: ").append(toIndentedString(allMeta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("_u");
    openapiFields.add("_t");
    openapiFields.add("collection");
    openapiFields.add("allMeta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RecordDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordDto is not found in the empty JSON string", RecordDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("_u") != null && !jsonObj.get("_u").isJsonNull()) && !jsonObj.get("_u").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_u` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_u").toString()));
      }
      if ((jsonObj.get("_t") != null && !jsonObj.get("_t").isJsonNull()) && !jsonObj.get("_t").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_t` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_t").toString()));
      }
      if ((jsonObj.get("collection") != null && !jsonObj.get("collection").isJsonNull()) && !jsonObj.get("collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordDto>() {
           @Override
           public void write(JsonWriter out, RecordDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecordDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecordDto
  * @throws IOException if the JSON string is invalid with respect to RecordDto
  */
  public static RecordDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordDto.class);
  }

 /**
  * Convert an instance of RecordDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

