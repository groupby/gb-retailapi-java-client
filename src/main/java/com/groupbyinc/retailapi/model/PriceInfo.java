/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupbyinc.retailapi.model.PriceInfoPriceEffectiveTime;
import com.groupbyinc.retailapi.model.PriceInfoPriceExpireTime;
import com.groupbyinc.retailapi.model.PriceInfoPriceRange;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Price info representation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-20T17:52:51.787881444-04:00[America/Toronto]")
public class PriceInfo {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Float price;

  public static final String SERIALIZED_NAME_ORIGINAL_PRICE = "originalPrice";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PRICE)
  private Float originalPrice;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Float cost;

  public static final String SERIALIZED_NAME_PRICE_EFFECTIVE_TIME = "priceEffectiveTime";
  @SerializedName(SERIALIZED_NAME_PRICE_EFFECTIVE_TIME)
  private PriceInfoPriceEffectiveTime priceEffectiveTime;

  public static final String SERIALIZED_NAME_PRICE_EXPIRE_TIME = "priceExpireTime";
  @SerializedName(SERIALIZED_NAME_PRICE_EXPIRE_TIME)
  private PriceInfoPriceExpireTime priceExpireTime;

  public static final String SERIALIZED_NAME_PRICE_RANGE = "priceRange";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGE)
  private PriceInfoPriceRange priceRange;

  public PriceInfo() {
  }

  public PriceInfo currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Currency code.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public PriceInfo price(Float price) {
    
    this.price = price;
    return this;
  }

   /**
   * Price value.
   * @return price
  **/
  @javax.annotation.Nullable
  public Float getPrice() {
    return price;
  }


  public void setPrice(Float price) {
    this.price = price;
  }


  public PriceInfo originalPrice(Float originalPrice) {
    
    this.originalPrice = originalPrice;
    return this;
  }

   /**
   * Original price value.
   * @return originalPrice
  **/
  @javax.annotation.Nullable
  public Float getOriginalPrice() {
    return originalPrice;
  }


  public void setOriginalPrice(Float originalPrice) {
    this.originalPrice = originalPrice;
  }


  public PriceInfo cost(Float cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Cost
   * @return cost
  **/
  @javax.annotation.Nullable
  public Float getCost() {
    return cost;
  }


  public void setCost(Float cost) {
    this.cost = cost;
  }


  public PriceInfo priceEffectiveTime(PriceInfoPriceEffectiveTime priceEffectiveTime) {
    
    this.priceEffectiveTime = priceEffectiveTime;
    return this;
  }

   /**
   * Get priceEffectiveTime
   * @return priceEffectiveTime
  **/
  @javax.annotation.Nullable
  public PriceInfoPriceEffectiveTime getPriceEffectiveTime() {
    return priceEffectiveTime;
  }


  public void setPriceEffectiveTime(PriceInfoPriceEffectiveTime priceEffectiveTime) {
    this.priceEffectiveTime = priceEffectiveTime;
  }


  public PriceInfo priceExpireTime(PriceInfoPriceExpireTime priceExpireTime) {
    
    this.priceExpireTime = priceExpireTime;
    return this;
  }

   /**
   * Get priceExpireTime
   * @return priceExpireTime
  **/
  @javax.annotation.Nullable
  public PriceInfoPriceExpireTime getPriceExpireTime() {
    return priceExpireTime;
  }


  public void setPriceExpireTime(PriceInfoPriceExpireTime priceExpireTime) {
    this.priceExpireTime = priceExpireTime;
  }


  public PriceInfo priceRange(PriceInfoPriceRange priceRange) {
    
    this.priceRange = priceRange;
    return this;
  }

   /**
   * Get priceRange
   * @return priceRange
  **/
  @javax.annotation.Nullable
  public PriceInfoPriceRange getPriceRange() {
    return priceRange;
  }


  public void setPriceRange(PriceInfoPriceRange priceRange) {
    this.priceRange = priceRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceInfo priceInfo = (PriceInfo) o;
    return Objects.equals(this.currencyCode, priceInfo.currencyCode) &&
        Objects.equals(this.price, priceInfo.price) &&
        Objects.equals(this.originalPrice, priceInfo.originalPrice) &&
        Objects.equals(this.cost, priceInfo.cost) &&
        Objects.equals(this.priceEffectiveTime, priceInfo.priceEffectiveTime) &&
        Objects.equals(this.priceExpireTime, priceInfo.priceExpireTime) &&
        Objects.equals(this.priceRange, priceInfo.priceRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, price, originalPrice, cost, priceEffectiveTime, priceExpireTime, priceRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceInfo {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    originalPrice: ").append(toIndentedString(originalPrice)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    priceEffectiveTime: ").append(toIndentedString(priceEffectiveTime)).append("\n");
    sb.append("    priceExpireTime: ").append(toIndentedString(priceExpireTime)).append("\n");
    sb.append("    priceRange: ").append(toIndentedString(priceRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("price");
    openapiFields.add("originalPrice");
    openapiFields.add("cost");
    openapiFields.add("priceEffectiveTime");
    openapiFields.add("priceExpireTime");
    openapiFields.add("priceRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PriceInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceInfo is not found in the empty JSON string", PriceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the optional field `priceEffectiveTime`
      if (jsonObj.get("priceEffectiveTime") != null && !jsonObj.get("priceEffectiveTime").isJsonNull()) {
        PriceInfoPriceEffectiveTime.validateJsonElement(jsonObj.get("priceEffectiveTime"));
      }
      // validate the optional field `priceExpireTime`
      if (jsonObj.get("priceExpireTime") != null && !jsonObj.get("priceExpireTime").isJsonNull()) {
        PriceInfoPriceExpireTime.validateJsonElement(jsonObj.get("priceExpireTime"));
      }
      // validate the optional field `priceRange`
      if (jsonObj.get("priceRange") != null && !jsonObj.get("priceRange").isJsonNull()) {
        PriceInfoPriceRange.validateJsonElement(jsonObj.get("priceRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceInfo>() {
           @Override
           public void write(JsonWriter out, PriceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PriceInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PriceInfo
  * @throws IOException if the JSON string is invalid with respect to PriceInfo
  */
  public static PriceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceInfo.class);
  }

 /**
  * Convert an instance of PriceInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

