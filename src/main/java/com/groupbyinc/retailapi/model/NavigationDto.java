/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupbyinc.retailapi.model.Metadata;
import com.groupbyinc.retailapi.model.NavigationTypeDto;
import com.groupbyinc.retailapi.model.RefinementDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Navigation available for the shopper to refine the results on.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-21T09:51:40.117075497-04:00[America/Toronto]")
public class NavigationDto {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private NavigationTypeDto type;

  public static final String SERIALIZED_NAME_REFINEMENTS = "refinements";
  @SerializedName(SERIALIZED_NAME_REFINEMENTS)
  private List<RefinementDto> refinements = new ArrayList<>();

  public static final String SERIALIZED_NAME_OR = "or";
  @SerializedName(SERIALIZED_NAME_OR)
  private Boolean or;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<Metadata> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public NavigationDto() {
  }

  public NavigationDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the field the navigation in on.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public NavigationDto displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Name of the navigation for display purposes.
   * @return displayName
  **/
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public NavigationDto type(NavigationTypeDto type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public NavigationTypeDto getType() {
    return type;
  }


  public void setType(NavigationTypeDto type) {
    this.type = type;
  }


  public NavigationDto refinements(List<RefinementDto> refinements) {
    
    this.refinements = refinements;
    return this;
  }

  public NavigationDto addRefinementsItem(RefinementDto refinementsItem) {
    if (this.refinements == null) {
      this.refinements = new ArrayList<>();
    }
    this.refinements.add(refinementsItem);
    return this;
  }

   /**
   * Get refinements
   * @return refinements
  **/
  @javax.annotation.Nonnull
  public List<RefinementDto> getRefinements() {
    return refinements;
  }


  public void setRefinements(List<RefinementDto> refinements) {
    this.refinements = refinements;
  }


  public NavigationDto or(Boolean or) {
    
    this.or = or;
    return this;
  }

   /**
   * Flag if this navigation supports or queries.
   * @return or
  **/
  @javax.annotation.Nullable
  public Boolean getOr() {
    return or;
  }


  public void setOr(Boolean or) {
    this.or = or;
  }


  public NavigationDto source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public NavigationDto metadata(List<Metadata> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public NavigationDto addMetadataItem(Metadata metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  public List<Metadata> getMetadata() {
    return metadata;
  }


  public void setMetadata(List<Metadata> metadata) {
    this.metadata = metadata;
  }


  public NavigationDto placeId(String placeId) {
    
    this.placeId = placeId;
    return this;
  }

   /**
   * Place id for inventory navigations.
   * @return placeId
  **/
  @javax.annotation.Nonnull
  public String getPlaceId() {
    return placeId;
  }


  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NavigationDto navigationDto = (NavigationDto) o;
    return Objects.equals(this.name, navigationDto.name) &&
        Objects.equals(this.displayName, navigationDto.displayName) &&
        Objects.equals(this.type, navigationDto.type) &&
        Objects.equals(this.refinements, navigationDto.refinements) &&
        Objects.equals(this.or, navigationDto.or) &&
        Objects.equals(this.source, navigationDto.source) &&
        Objects.equals(this.metadata, navigationDto.metadata) &&
        Objects.equals(this.placeId, navigationDto.placeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, type, refinements, or, source, metadata, placeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NavigationDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    refinements: ").append(toIndentedString(refinements)).append("\n");
    sb.append("    or: ").append(toIndentedString(or)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("displayName");
    openapiFields.add("type");
    openapiFields.add("refinements");
    openapiFields.add("or");
    openapiFields.add("source");
    openapiFields.add("metadata");
    openapiFields.add("placeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("refinements");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("placeId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NavigationDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NavigationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NavigationDto is not found in the empty JSON string", NavigationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NavigationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NavigationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NavigationDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("refinements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `refinements` to be an array in the JSON string but got `%s`", jsonObj.get("refinements").toString()));
      }

      JsonArray jsonArrayrefinements = jsonObj.getAsJsonArray("refinements");
      // validate the required field `refinements` (array)
      for (int i = 0; i < jsonArrayrefinements.size(); i++) {
        RefinementDto.validateJsonElement(jsonArrayrefinements.get(i));
      };
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("metadata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }

      JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
      // validate the required field `metadata` (array)
      for (int i = 0; i < jsonArraymetadata.size(); i++) {
        Metadata.validateJsonElement(jsonArraymetadata.get(i));
      };
      if (!jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NavigationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NavigationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NavigationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NavigationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<NavigationDto>() {
           @Override
           public void write(JsonWriter out, NavigationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NavigationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NavigationDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NavigationDto
  * @throws IOException if the JSON string is invalid with respect to NavigationDto
  */
  public static NavigationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NavigationDto.class);
  }

 /**
  * Convert an instance of NavigationDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

