/*
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupbyinc.retailapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupbyinc.retailapi.JSON;

/**
 * Product color info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-28T19:17:28.544199255-04:00[America/Toronto]")
public class ColorInfo {
  public static final String SERIALIZED_NAME_COLOR_FAMILIES = "colorFamilies";
  @SerializedName(SERIALIZED_NAME_COLOR_FAMILIES)
  private List<String> colorFamilies;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<String> colors;

  public ColorInfo() {
  }

  public ColorInfo colorFamilies(List<String> colorFamilies) {
    
    this.colorFamilies = colorFamilies;
    return this;
  }

  public ColorInfo addColorFamiliesItem(String colorFamiliesItem) {
    if (this.colorFamilies == null) {
      this.colorFamilies = new ArrayList<>();
    }
    this.colorFamilies.add(colorFamiliesItem);
    return this;
  }

   /**
   * Product color families (array).
   * @return colorFamilies
  **/
  @javax.annotation.Nullable
  public List<String> getColorFamilies() {
    return colorFamilies;
  }


  public void setColorFamilies(List<String> colorFamilies) {
    this.colorFamilies = colorFamilies;
  }


  public ColorInfo colors(List<String> colors) {
    
    this.colors = colors;
    return this;
  }

  public ColorInfo addColorsItem(String colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

   /**
   * Product color (array).
   * @return colors
  **/
  @javax.annotation.Nullable
  public List<String> getColors() {
    return colors;
  }


  public void setColors(List<String> colors) {
    this.colors = colors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColorInfo colorInfo = (ColorInfo) o;
    return Objects.equals(this.colorFamilies, colorInfo.colorFamilies) &&
        Objects.equals(this.colors, colorInfo.colors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorFamilies, colors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColorInfo {\n");
    sb.append("    colorFamilies: ").append(toIndentedString(colorFamilies)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorFamilies");
    openapiFields.add("colors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ColorInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColorInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColorInfo is not found in the empty JSON string", ColorInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColorInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColorInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("colorFamilies") != null && !jsonObj.get("colorFamilies").isJsonNull() && !jsonObj.get("colorFamilies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorFamilies` to be an array in the JSON string but got `%s`", jsonObj.get("colorFamilies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull() && !jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColorInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColorInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColorInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColorInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ColorInfo>() {
           @Override
           public void write(JsonWriter out, ColorInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColorInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ColorInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ColorInfo
  * @throws IOException if the JSON string is invalid with respect to ColorInfo
  */
  public static ColorInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColorInfo.class);
  }

 /**
  * Convert an instance of ColorInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

